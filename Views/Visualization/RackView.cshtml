@model BelbimEnv.Models.RackVisualizationViewModel
@using BelbimEnv.Models

@{
    ViewData["Title"] = "Kabin Görünümü";
    var colorMap = new Dictionary<string, string>();
    var colors = new List<string> { "#0d6efd", "#6f42c1", "#198754", "#dc3545", "#fd7e14", "#20c997", "#6c757d" };
    int colorIndex = 0;
    var highlightedServerId = Context.Request.Query["highlight"];

    bool PortsAreOnFront(Server s) => (s.RearFront ?? "").Trim().ToUpper().StartsWith("F");
    bool PortsAreOnRear(Server s) => (s.RearFront ?? "").Trim().ToUpper().StartsWith("R");

    var groupedRacks = Model.Racks
        .Select(r => new
        {
            Name = r.Key.Replace(" (Ön)", "").Replace(" (Arka)", ""),
            IsFront = r.Key.Contains("(Ön)"),
            Data = r.Value
        })
        .GroupBy(r => r.Name)
        .OrderBy(g => g.Key)
        .ToList();
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h3><i class="fas fa-th me-2"></i>@ViewData["Title"]: <span class="text-primary">@Model.SelectedLocation</span></h3>
    <div class="dropdown">
        <button class="btn btn-secondary dropdown-toggle" type="button" id="locationDropdown" data-bs-toggle="dropdown" aria-expanded="false">
            Lokasyon Değiştir
        </button>
        <ul class="dropdown-menu" aria-labelledby="locationDropdown">
            @foreach (var loc in Model.AllLocations)
            {
                <li><a class="dropdown-item @(loc == Model.SelectedLocation ? "active" : "")" asp-action="RackView" asp-route-location="@loc">@loc</a></li>
            }
        </ul>
    </div>
</div>

@if (!groupedRacks.Any())
{
    <div class="alert alert-warning">Seçili lokasyonda gösterilecek kabin verisi bulunamadı.</div>
}

<!-- ===== GÜNCELLENEN BÖLÜM: HER SATIRDA MAKSİMUM 2 KABİN ÇİFTİ ===== -->
@for (int i = 0; i < groupedRacks.Count; i += 2)
{
    var cabinetPair = groupedRacks.Skip(i).Take(2);
    <div class="rack-container mb-4">
        @foreach (var cabinetGroup in cabinetPair)
        {
            var frontRack = cabinetGroup.FirstOrDefault(r => r.IsFront);
            var rearRack = cabinetGroup.FirstOrDefault(r => !r.IsFront);

            <!-- ÖN KABİN (varsa çizilir) -->
            @if (frontRack != null)
            {
                <div class="rack-wrapper">
                    <div class="rack-header">@cabinetGroup.Key (Ön)</div>
                    <div class="rack">
                        <div class="rack-side left">@for (int j = 42; j >= 1; j--) {
                        <div class="u-hole">@j</div>
                    }
        </div>
                    <div class="rack-middle">
                        <div class="rack-units">
                            @{
                                var processedUnits = new HashSet<int>();
                                foreach (var unit in frontRack.Data.OrderByDescending(u => u.U_Number))
                                {
                                    if (processedUnits.Contains(unit.U_Number)) { continue; }
                                    if (unit.IsOccupied)
                                    {
                                        var serversInThisBlock = unit.OccupyingServers;
                                        var firstServer = serversInThisBlock.First();
                                        int uSpan = frontRack.Data.Count(u => u.IsOccupied && u.OccupyingServers.Any(s => s.Id == firstServer.Id));
                                        int height = (uSpan * 20) - 2;
                                        for (int u = unit.U_Number; u > unit.U_Number - uSpan; u--) { processedUnits.Add(u); }

                                        <div class="server-block" style="height: @(height)px;">
                                            @foreach (var server in serversInThisBlock.OrderBy(s => s.HostDns))
                                            {
                                                if (!colorMap.ContainsKey(server.Model ?? "default")) { colorMap[server.Model ?? "default"] = colors[colorIndex++ % colors.Count]; }
                                                string serverColor = colorMap[server.Model ?? "default"];
                                                <div class="server-sub-block @(server.Id.ToString() == highlightedServerId ? "highlight-target" : "")" style="background-color: @serverColor;" data-bs-toggle="tooltip" data-bs-placement="right" data-bs-html="true" title="<strong>@server.HostDns</strong><br>Model: @server.Model<br>U Aralığı: @server.KabinU">
                                                    <a asp-controller="Servers" asp-action="Details" asp-route-id="@server.Id" class="server-link">
                                                        @if (PortsAreOnFront(server))
                                                        {
                                                            <span class="port-indicator"><i class="fas fa-plug"></i></span>
                                                        }
                                                        <span class="server-name">@server.HostDns</span>
                                                        <span class="server-u">@server.KabinU</span>
                                                    </a>
                                                </div>
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="empty-unit"></div>
                                        processedUnits.Add(unit.U_Number);
                                    }
                                }
                            }
                        </div>
                    </div>
                    <div class="rack-side right">@for (int j = 42; j >= 1; j--) {
                    <div class="u-hole">@j</div>
                }
    </div>
            </div>
        </div>
    }

    <!-- ARKA KABİN (varsa çizilir) -->
    @if (rearRack != null)
    {
        <div class="rack-wrapper">
            <div class="rack-header">@cabinetGroup.Key (Arka)</div>
            <div class="rack">
                <div class="rack-side left">@for (int j = 42; j >= 1; j--) {
                <div class="u-hole">@j</div>
            }
</div>
            <div class="rack-middle">
                <div class="rack-units">
                    @{
                        var processedUnits = new HashSet<int>();
                        foreach (var unit in rearRack.Data.OrderByDescending(u => u.U_Number))
                        {
                            if (processedUnits.Contains(unit.U_Number)) { continue; }
                            if (unit.IsOccupied)
                            {
                                var serversInThisBlock = unit.OccupyingServers;
                                var firstServer = serversInThisBlock.First();
                                int uSpan = rearRack.Data.Count(u => u.IsOccupied && u.OccupyingServers.Any(s => s.Id == firstServer.Id));
                                int height = (uSpan * 20) - 2;
                                for (int u = unit.U_Number; u > unit.U_Number - uSpan; u--) { processedUnits.Add(u); }

                                <div class="server-block" style="height: @(height)px;">
                                    @foreach (var server in serversInThisBlock.OrderBy(s => s.HostDns))
                                    {
                                        if (!colorMap.ContainsKey(server.Model ?? "default")) { colorMap[server.Model ?? "default"] = colors[colorIndex++ % colors.Count]; }
                                        string serverColor = colorMap[server.Model ?? "default"];
                                        <div class="server-sub-block @(server.Id.ToString() == highlightedServerId ? "highlight-target" : "")" style="background-color: @serverColor;" data-bs-toggle="tooltip" data-bs-placement="right" data-bs-html="true" title="<strong>@server.HostDns</strong><br>Model: @server.Model<br>U Aralığı: @server.KabinU">
                                            <a asp-controller="Servers" asp-action="Details" asp-route-id="@server.Id" class="server-link">
                                                @if (PortsAreOnRear(server))
                                                {
                                                    <span class="port-indicator"><i class="fas fa-plug"></i></span>
                                                }
                                                <span class="server-name">@server.HostDns</span>
                                                <span class="server-u">@server.KabinU</span>
                                            </a>
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                <div class="empty-unit"></div>
                                processedUnits.Add(unit.U_Number);
                            }
                        }
                    }
                </div>
            </div>
            <div class="rack-side right">@for (int j = 42; j >= 1; j--) {
            <div class="u-hole">@j</div>
                        }
</div>
        </div>
    </div>
        }
        }
</div>
}
<!-- ========================================================= -->
@section Scripts {
    <script>
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl)
        });
        document.addEventListener("DOMContentLoaded", function() {
            const highlightedElement = document.querySelector('.highlight-target');
            if (highlightedElement) {
                highlightedElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
                highlightedElement.classList.add('flash');
            }
        });
    </script>
}

@section Styles {
    <style>
        .rack-container {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            justify-content: center;
        }

        .rack-wrapper {
            display: flex;
            flex-direction: column;
            width: 300px;
        }

        .rack-header {
            background-color: #343a40;
            color: white;
            padding: 8px 10px;
            font-weight: bold;
            text-align: center;
            border-top-left-radius: 5px;
            border-top-right-radius: 5px;
        }

        .rack {
            display: flex;
            flex-grow: 1;
            background-color: #f8f9fa;
            border: 1px solid #dee2e6;
            border-top: none;
            box-shadow: 0 .5rem 1rem rgba(0,0,0,.15) !important;
        }

        .rack-side {
            background-color: #495057;
            padding: 5px 0;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .u-hole {
            width: 25px;
            height: 18px;
            margin-bottom: 2px;
            color: #adb5bd;
            font-size: 10px;
            text-align: center;
            border-top: 1px solid #6c757d;
            border-bottom: 1px solid #6c757d;
        }

        .rack-middle {
            flex-grow: 1;
        }

        .rack-units {
            padding: 5px;
            display: flex;
            flex-direction: column;
        }

        .empty-unit, .server-block {
            margin-bottom: 2px;
            box-sizing: border-box;
        }

        .empty-unit {
            height: 18px;
            background-image: linear-gradient(45deg, #e9ecef 25%, #dee2e6 25%, #dee2e6 50%, #e9ecef 50%, #e9ecef 75%, #dee2e6 75%, #dee2e6 100%);
            background-size: 10px 10px;
        }

        .server-block {
            display: flex;
            flex-direction: column;
            justify-content: stretch;
            border: 1px solid rgba(0,0,0,0.2);
            border-radius: 3px;
            overflow: hidden;
        }

        .server-sub-block {
            flex: 1;
            display: flex;
            align-items: center;
            position: relative;
            z-index: 1;
        }

        .server-link {
            display: flex;
            justify-content: space-between;
            align-items: center;
            width: 100%;
            height: 100%;
            padding: 0 8px;
            color: white;
            text-decoration: none;
            font-size: 11px;
            font-weight: bold;
            transition: background-color 0.2s;
        }

            .server-link:hover {
                background-color: rgba(0,0,0,0.2);
            }

        .port-indicator {
            margin-right: 5px;
            color: rgba(255, 255, 255, 0.7);
            font-size: 11px;
        }

        .server-name {
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            flex-grow: 1;
        }

        .server-u {
            background-color: rgba(0,0,0,0.3);
            padding: 0 4px;
            border-radius: 3px;
            margin-left: 5px;
        }

        .highlight-target.flash {
            animation: pulse-glow-red 3s 3;
        }

        @@keyframes pulse-glow-red {
            0% {
                transform: scale(1);
                box-shadow: 0 0 0 0 rgba(220, 53, 69, 0.7);
            }

            50% {
                transform: scale(1.15);
                box-shadow: 0 0 25px 15px rgba(220, 53, 69, 0);
            }

            100% {
                transform: scale(1);
                box-shadow: 0 0 0 0 rgba(220, 53, 69, 0);
            }
        }
    </style>
}