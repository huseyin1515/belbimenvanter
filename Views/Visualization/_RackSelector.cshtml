@model BelbimEnv.Models.RackVisualizationViewModel

@{
    var colorMap = new Dictionary<string, string>();
    var colors = new List<string> { "#0d6efd", "#6f42c1", "#198754", "#dc3545", "#fd7e14", "#20c997", "#6c757d" };
    int colorIndex = 0;
}

<div class="d-flex justify-content-between align-items-center mb-3">
    <h5 class="mb-0">2. Adım: Boş Bir Alan Seçin (@Model.SelectedLocation)</h5>
    <button type="button" class="btn btn-sm btn-link" id="backToLocationsBtn">« Geri Dön</button>
</div>

<div class="rack-container selectable">
    @if (!Model.Racks.Any())
    {
        <div class="alert alert-info">Bu lokasyonda gösterilecek kabin verisi bulunamadı.</div>
    }

    @foreach (var rack in Model.Racks)
    {
        var processedUnits = new HashSet<int>();
        <div class="rack-wrapper">
            <div class="rack-header">@rack.Key</div>
            <div class="rack" data-rack-name="@rack.Key.Split(' ')[0]" data-rack-side="@(rack.Key.Contains("(Ön)") ? "F" : "R")">
                <div class="rack-side left">
                    @for (int i = 42; i >= 1; i--)
                    {
                        <div class="u-hole">@i</div>
                    }
                </div>
                <div class="rack-middle">
                    <div class="rack-units">
                        @foreach (var unit in rack.Value.OrderByDescending(u => u.U_Number))
                        {
                            if (processedUnits.Contains(unit.U_Number)) { continue; }

                            if (unit.IsOccupied)
                            {
                                var serversInThisBlock = unit.OccupyingServers;
                                var firstServer = serversInThisBlock.First();
                                int uSpan = rack.Value.Count(u => u.IsOccupied && u.OccupyingServers.Any(s => s.Id == firstServer.Id));
                                int height = (uSpan * 20) - 2;
                                for (int u = unit.U_Number; u > unit.U_Number - uSpan; u--) { processedUnits.Add(u); }

                                <div class="server-block" style="height: @(height)px;">
                                    @foreach (var server in serversInThisBlock.OrderBy(s => s.HostDns))
                                    {
                                        if (!colorMap.ContainsKey(server.Model ?? "default")) { colorMap[server.Model ?? "default"] = colors[colorIndex++ % colors.Count]; }
                                        string serverColor = colorMap[server.Model ?? "default"];
                                        <div class="server-sub-block" style="background-color: @serverColor;" title="@server.HostDns">
                                            <div class="server-link">
                                                <span class="server-name">@server.HostDns</span>
                                                <span class="server-u">@server.KabinU</span>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                <div class="empty-unit selectable-u" data-u="@unit.U_Number"></div>
                                processedUnits.Add(unit.U_Number);
                            }
                        }
                    </div>
                </div>
                <div class="rack-side right">
                    @for (int i = 42; i >= 1; i--)
                    {
                        <div class="u-hole">@i</div>
                    }
                </div>
            </div>
        </div>
    }
</div>