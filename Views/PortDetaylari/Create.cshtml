@model BelbimEnv.Models.PortCreateBulkViewModel
@using BelbimEnv.Models
@using BelbimEnv.Helpers

@{
    ViewData["Title"] = "Toplu Port Ekle";
    var linkSpeedOptions = new List<string> {  "1000", "1500", "2500", "3000", "4000", "5000", "10000", "25000", "40000", "100000" };
}
<h4><i class="fas fa-plus-circle text-success me-2"></i>@ViewData["Title"]</h4>
<h6 class="text-muted">@Model.ServerName sunucusuna yeni portlar ekleniyor.</h6>
<hr />

<!-- Adet Belirleme Alanı -->
<div class="row align-items-end g-3 mb-4 p-3 border-dashed rounded">
    <div class="col-md-3">
        <label for="portCount" class="form-label fw-bold">Kaç adet port eklenecek?</label>
        <input type="number" id="portCount" class="form-control" value="1" min="1" max="50">
    </div>
    <div class="col-md-3">
        <button type="button" id="generateRowsBtn" class="btn btn-info"><i class="fas fa-cogs me-1"></i>Satırları Oluştur</button>
    </div>
</div>

<form asp-action="Create" method="post">
    @Html.AntiForgeryToken()
    <input type="hidden" asp-for="ServerId" />
    <div id="port-rows-container"></div>
    <div id="save-button-container" class="form-group mt-4" style="display: none;">
        <input type="submit" value="Tüm Portları Kaydet" class="btn btn-primary" />
        <a asp-action="Manage" asp-route-id="@Model.ServerId" class="btn btn-outline-secondary">İptal</a>
    </div>
</form>
    <template id="port-row-template">
        <div class="port-row card mb-3">
            <div class="card-body">
                <h6 class="card-title text-primary">Port #{ROW_NUMBER}</h6>
                <div class="row g-3">
                    <!-- ... (Port Tipi ve Dinamik Alanlar aynı) ... -->
                    <hr class="my-2" />
                    <!-- ORTAK ALANLAR -->
                    <div class="col-md-3">
                        <label class="form-label d-block">Link Durumu</label>
                        <div class="btn-group link-status-group">
                            <input type="hidden" name="Portlar[{INDEX}].LinkStatus" class="link-status-hidden-input" />
                            <button type="button" class="btn btn-outline-success btn-sm status-btn" data-status="Up">Up</button>
                            <button type="button" class="btn btn-outline-danger btn-sm status-btn" data-status="Down">Down</button>
                        </div>
                    </div>

                    <div class="col-md-3">
                        <label class="form-label">Link Hızı (Mbps)</label>
                        <select name="Portlar[{INDEX}].LinkSpeed" class="form-select">
                            <option value="">Seçiniz...</option>
                            @foreach (var speed in linkSpeedOptions)
                            {
                                <option value="@speed">@speed</option>
                            }
                        </select>
                    </div>

                    <div class="col-md-3 autocomplete-container"><label class="form-label">Switch/Cihaz Adı</label><input type="text" name="Portlar[{INDEX}].SwName" class="form-control sw-name-input" autocomplete="off" /><div class="autocomplete-items"></div></div>
                    <div class="col-md-3"><label class="form-label">Switch Port</label><input type="text" name="Portlar[{INDEX}].SwPort" class="form-control" /></div>
                </div>
            </div>
        </div>
    </template>
@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.addEventListener("DOMContentLoaded", function() {
            const generateBtn = document.getElementById('generateRowsBtn');
            const container = document.getElementById('port-rows-container');
            const template = document.getElementById('port-row-template');
            const portCountInput = document.getElementById('portCount');
            const saveButtonContainer = document.getElementById('save-button-container');

            // EKSİK OLAN SATIR OLUŞTURMA KODU
            generateBtn.addEventListener('click', function() {
                const count = parseInt(portCountInput.value, 10);
                container.innerHTML = '';
                if (count > 0 && count <= 50) {
                    for (let i = 0; i < count; i++) {
                        const clone = template.content.cloneNode(true);
                        let html = clone.firstElementChild.outerHTML;
                        html = html.replace(/{INDEX}/g, i).replace(/{ROW_NUMBER}/g, i + 1);
                        container.insertAdjacentHTML('beforeend', html);
                    }
                    saveButtonContainer.style.display = 'block';
                } else {
                    saveButtonContainer.style.display = 'none';
                }
            });

            container.addEventListener('change', function(e) {
                if (e.target.classList.contains('port-type-selector')) {
                    const selectedValue = e.target.value;
                    const parentRow = e.target.closest('.port-row');
                    parentRow.querySelectorAll('.dynamic-field').forEach(field => field.style.display = 'none');
                    if (selectedValue === '@((int)PortTipiEnum.FC)' || selectedValue === '@((int)PortTipiEnum.VirtualFC)') {
                        parentRow.querySelector('.fiber-field').style.display = 'block';
                        parentRow.querySelector('.fc-field').style.display = 'block';
                    } else if (selectedValue === '@((int)PortTipiEnum.Bakir)' || selectedValue === '@((int)PortTipiEnum.VirtualBakir)') {
                        parentRow.querySelectorAll('.bakir-field').forEach(f => f.style.display = 'block');
                    } else if (selectedValue === '@((int)PortTipiEnum.FiberForSAN)') {
                        parentRow.querySelector('.san-field').style.display = 'block';
                    }
                }
            });

            container.addEventListener('click', function(e) {
                if (e.target.classList.contains('status-btn')) {
                    const button = e.target;
                    const group = button.closest('.link-status-group');
                    const hiddenInput = group.querySelector('.link-status-hidden-input');
                    const allButtonsInGroup = group.querySelectorAll('.status-btn');
                    const newStatus = button.dataset.status;
                    if (button.classList.contains('active')) {
                        button.classList.remove('active', 'btn-success', 'btn-danger');
                        button.classList.add(newStatus === 'Up' ? 'btn-outline-success' : 'btn-outline-danger');
                        hiddenInput.value = '';
                    } else {
                        allButtonsInGroup.forEach(btn => {
                            btn.classList.remove('active', 'btn-success', 'btn-danger');
                            btn.classList.add(btn.dataset.status === 'Up' ? 'btn-outline-success' : 'btn-outline-danger');
                        });
                        button.classList.add('active', newStatus === 'Up' ? 'btn-success' : 'btn-danger');
                        button.classList.remove(newStatus === 'Up' ? 'btn-outline-success' : 'btn-outline-danger');
                        hiddenInput.value = newStatus;
                    }
                }
            });

            container.addEventListener('input', function(e) {
                if (e.target.classList.contains('sw-name-input')) {
                    const input = e.target;
                    const list = input.nextElementSibling;
                    const term = input.value;
                    if (!term || term.length < 2) { list.innerHTML = ''; return; }
                    fetch(`/PortDetaylari/SearchServers?term=${encodeURIComponent(term)}`)
                        .then(response => response.json())
                        .then(data => {
                            list.innerHTML = '';
                            data.forEach(item => {
                                const div = document.createElement('div');
                                div.innerHTML = item.replace(new RegExp(term, "gi"), (match) => `<strong>${match}</strong>`);
                                div.addEventListener('click', function() {
                                    input.value = item;
                                    list.innerHTML = '';
                                });
                                list.appendChild(div);
                            });
                        });
                }
            });

            document.addEventListener("click", function (e) {
                document.querySelectorAll('.autocomplete-items').forEach(list => {
                    if (e.target !== list && !e.target.classList.contains('sw-name-input')) {
                        list.innerHTML = '';
                    }
                });
            });
        });
    </script>
}

@section Styles {
    <style>
        .autocomplete-container {
            position: relative;
        }

        .autocomplete-items {
            position: absolute;
            border: 1px solid #d1d1d1;
            border-bottom: none;
            border-top: none;
            z-index: 99;
            top: 100%;
            left: 0;
            right: 0;
            background-color: #fff;
            max-height: 200px;
            overflow-y: auto;
        }

            .autocomplete-items div {
                padding: 10px;
                cursor: pointer;
                border-bottom: 1px solid #d1d1d1;
            }

                .autocomplete-items div:hover {
                    background-color: #e9e9e9;
                }

            .autocomplete-items strong {
                font-weight: 700;
            }
    </style>
}